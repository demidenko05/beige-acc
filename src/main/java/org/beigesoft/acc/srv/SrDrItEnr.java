/*
BSD 2-Clause License

Copyright (c) 2019, Beigesoftâ„¢
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.beigesoft.acc.srv;

import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Arrays;
import java.util.Date;
import java.util.Locale;
import java.text.DateFormat;
import java.math.BigDecimal;
import java.io.InputStream;
import java.io.IOException;
import java.net.URL;

import org.beigesoft.exc.ExcCode;
import org.beigesoft.mdl.CmnPrf;
//import org.beigesoft.mdl.IRecSet;
import org.beigesoft.mdl.ColVals;
import org.beigesoft.log.ILog;
import org.beigesoft.hld.IHlIntCls;
import org.beigesoft.rdb.IRdb;
import org.beigesoft.rdb.IOrm;
import org.beigesoft.rdb.SrvClVl;
import org.beigesoft.srv.II18n;
import org.beigesoft.acc.mdlb.ADrItEnr;
import org.beigesoft.acc.mdlb.IMkDriEnr;
import org.beigesoft.acc.mdlb.IItmSrc;
import org.beigesoft.acc.mdlb.IDcDri;
import org.beigesoft.acc.mdlp.AcStg;
import org.beigesoft.acc.mdlp.DriEnrSr;

/**
 * <p>Service that makes, reverses, retrieves draw item entries
 * for given drawer/document.</p>
 *
 * @param <RS> platform dependent record set type
 * @author Yury Demidenko
 */
public class SrDrItEnr<RS> implements ISrDrItEnr {

  /**
   * <p>Log.</p>
   **/
  private ILog log;

  /**
   * <p>ORM service.</p>
   **/
  private IOrm orm;

  /**
   * <p>Database service.</p>
   **/
  private IRdb<RS> rdb;

  /**
   * <p>I18N service.</p>
   */
  private II18n i18n;

  /**
   * <p>Column values service.</p>
   **/
  private SrvClVl srvClVl;

  /**
   * <p>Holder of entries sources types.</p>
   **/
  private IHlIntCls hlTyEnSr;

  /**
   * <p>Android configuration, RDB insert returns autogenerated ID,
   * updating with expression like "VER=VER+1" is not possible.</p>
   **/
  private boolean isAndr;

  //Cached data:
  /**
   * <p>Entries queries.</p>
   */
  private Map<String, String> entrQus = new HashMap<String, String>();

  /**
   * <p>Entries sources.</p>
   */
  private List<DriEnrSr> entrSrcs;

  /**
   * <p>Handles settings changed, i.e. clears cached data.</p>
   * @param pRvs Request scoped variables
   * @throws Exception - an exception
   **/
  @Override
  public final synchronized void hndStgCng(
    final Map<String, Object> pRvs) throws Exception {
    this.entrSrcs = null;
  }

  /**
   * <p>Makes drawing entries for given drawer.</p>
   * @param <T> draw entry type
   * @param pRvs Request scoped variables
   * @param pDrer drawer document or line
   * @throws Exception - an exception
   **/
  @Override
  public final <T extends ADrItEnr> void draw(final Map<String, Object> pRvs,
    final IMkDriEnr<T> pDrer) throws Exception {
    Map<String, Object> vs = new HashMap<String, Object>();
    if (this.entrSrcs == null) {
      synchronized (this) {
        if (this.entrSrcs == null) {
          this.entrSrcs = this.orm.retLst(pRvs, vs, DriEnrSr.class);
        }
      }
    }
  }

  /**
   * <p>Makes drawing entries for given drawer from given source.</p>
   * @param <T> draw entry type
   * @param pRvs Request scoped variables
   * @param pDrer drawer document or line
   * @param pSrc item source
   * @param pQuan quantity
   * @throws Exception - an exception
   **/
  @Override
  public final <T extends ADrItEnr> void drawFr(final Map<String, Object> pRvs,
    final IMkDriEnr<T> pDrer, final IItmSrc pSrc,
      final BigDecimal pQuan) throws Exception {
    if (pSrc.getItLf().compareTo(pQuan) == -1) {
      throw new ExcCode(ExcCode.WR, "Src has no enough items! srCls/itLf/quan: "
        + pSrc.getClass() + "/" + pSrc.getItLf() + "/" + pQuan);
    }
    if (pSrc.getToLf().compareTo(BigDecimal.ZERO) == 0) { //first withdrawal:
      pSrc.setToLf(pSrc.getIniTo());
    }
    Map<String, Object> vs = new HashMap<String, Object>();
    AcStg as = (AcStg) pRvs.get("astg");
    CmnPrf cpf = (CmnPrf) pRvs.get("cpf");
    DateFormat dtFr = DateFormat.getDateTimeInstance(DateFormat
      .MEDIUM, DateFormat.SHORT, new Locale(cpf.getLngDef().getIid()));
    BigDecimal tot = pSrc.getToLf().divide(pSrc.getItLf()).multiply(pQuan)
      .setScale(as.getCsDp(), as.getRndm());
    pSrc.setToLf(pSrc.getToLf().subtract(tot));
    pSrc.setItLf(pSrc.getItLf().subtract(pQuan));
    T enr = pDrer.getEnrCls().newInstance();
    enr.setDbOr(this.orm.getDbId());
    enr.setSrTy(pSrc.cnsTy());
    enr.setSrId(pSrc.getIid());
    enr.setSowTy(pSrc.getOwnrTy());
    enr.setSowId(pSrc.getOwnrId());
    enr.setDrTy(pDrer.cnsTy());
    enr.setDrId(pDrer.getIid());
    enr.setDowTy(pDrer.getOwnrTy());
    enr.setDowId(pDrer.getOwnrId());
    enr.setItm(pDrer.getItm());
    enr.setUom(pDrer.getUom());
    enr.setQuan(pDrer.getQuan());
    StringBuffer sb = mkDscr(pRvs, pDrer, dtFr);
    enr.setDscr(sb.toString());
    this.orm.insIdLn(pRvs, vs, enr);
    if (this.isAndr) {
      String[] ndf = new String[] {"itLf", "toLf", "ver"};
      Arrays.sort(ndf);
      vs.put("ndFds", ndf);
      this.orm.update(pRvs, vs, pSrc);
    } else { //use fastest locking:
      ColVals cv = new ColVals();
      this.srvClVl.put(cv, "itLf", "ITLF-" + pQuan);
      this.srvClVl.put(cv, "toLf", pSrc.getToLf().toString());
      this.srvClVl.putExpr(cv, "itLf");
      this.srvClVl.put(cv, "ver", "VER+1");
      this.srvClVl.putExpr(cv, "ver");
      try {
        this.rdb.update(pSrc.getClass(), cv, "IID=" + pSrc.getIid());
      } catch (Exception e) {
        this.log.error(pRvs, getClass(), "THERE_IS_NO_GOODS", e);
        throw new ExcCode(ExcCode.WRPR, "THERE_IS_NO_GOODS");
      }
    }
  }

  /**
   * <p>Reverses drawing entries for given drawer.</p>
   * @param <T> draw entry type
   * @param pRvs Request scoped variables
   * @param pDrer drawer document or line
   * @throws Exception - an exception
   **/
  @Override
  public final <T extends ADrItEnr> void rvDraw(final Map<String, Object> pRvs,
    final IMkDriEnr<T> pDrer) throws Exception {
  }

  /**
   * <p>Retrieves drawing entries for given document.</p>
   * @param <T> draw entry type
   * @param pRvs Request scoped variables
   * @param pDoc document
   * @return entries
   * @throws Exception - an exception
   **/
  @Override
  public final <T extends ADrItEnr> List<T> retEntrs(
    final Map<String, Object> pRvs, final IDcDri<T> pDoc) throws Exception {
    List<T> rz = null;
    return rz;
  }

  /**
   * <p>Makes entry description.</p>
   * @param pRvs request scoped vars
   * @param pDrer drawer
   * @param pDtFrm date format
   * @return string buffer
   * @throws Exception - an exception
   **/
  public final StringBuffer mkDscr(final Map<String, Object> pRvs,
    final IMkDriEnr pDrer, final DateFormat pDtFrm) throws Exception {
    CmnPrf cpf = (CmnPrf) pRvs.get("cpf");
    StringBuffer sb = new StringBuffer();
    sb.append(getI18n().getMsg("Made_at", cpf.getLngDef().getIid()) + " "
      + pDtFrm.format(new Date()) + " ");
    sb.append(getI18n().getMsg("by_who", cpf.getLngDef().getIid()) + ": ");
    sb.append(getI18n().getMsg(pDrer.getClass().getSimpleName() + "sht",
      cpf.getLngDef().getIid()) + " #" + pDrer.getDbOr() + "-" + pDrer
        .getIid() + ", " + pDtFrm.format(pDrer.getDocDt()));
    if (pDrer.getOwnrId() != null) {
      sb.append(", " + getI18n().getMsg("in", cpf.getLngDef().getIid())
       + getI18n().getMsg(this.hlTyEnSr.get(pDrer.getOwnrTy())
        .getSimpleName() + "sht", cpf.getLngDef().getIid()));
      sb.append(" #" + pDrer.getDbOr() + "-" + pDrer.getOwnrId());
    }
    return sb;
  }

  /**
   * <p>Lazy gets SQL query.</p>
   * @param pFlNm file name
   * @return SQL query
   * @throws IOException - IO exception
   **/
  public final String lazEntrQu(final String pFlNm) throws IOException {
    String rz = this.entrQus.get(pFlNm);
    if (rz == null) {
      synchronized (this) {
        rz = this.entrQus.get(pFlNm);
        if (rz == null) {
          rz = loadStr("/acc/dri/" + pFlNm + ".sql");
          this.entrQus.put(pFlNm, rz);
        }
      }
    }
    return rz;
  }

  /**
   * <p>Loads SQL query.</p>
   * @param pFlNm file name
   * @return SQL query
   * @throws IOException - IO exception
   **/
  public final String loadStr(final String pFlNm) throws IOException {
    URL urlFile = SrDrItEnr.class.getResource(pFlNm);
    if (urlFile != null) {
      InputStream is = null;
      try {
        is = SrDrItEnr.class.getResourceAsStream(pFlNm);
        byte[] bArray = new byte[is.available()];
        is.read(bArray, 0, is.available());
        return new String(bArray, "UTF-8");
      } finally {
        if (is != null) {
          is.close();
        }
      }
    }
    return null;
  }

  //Simple getters and setters:
  /**
   * <p>Getter for log.</p>
   * @return ILog
   **/
  public final ILog getLog() {
    return this.log;
  }

  /**
   * <p>Setter for log.</p>
   * @param pLog reference
   **/
  public final void setLog(final ILog pLog) {
    this.log = pLog;
  }

  /**
   * <p>Getter for orm.</p>
   * @return IOrm
   **/
  public final IOrm getOrm() {
    return this.orm;
  }

  /**
   * <p>Setter for orm.</p>
   * @param pOrm reference
   **/
  public final void setOrm(final IOrm pOrm) {
    this.orm = pOrm;
  }

  /**
   * <p>Getter for rdb.</p>
   * @return IRdb<RS>
   **/
  public final IRdb<RS> getRdb() {
    return this.rdb;
  }

  /**
   * <p>Setter for rdb.</p>
   * @param pRdb reference
   **/
  public final void setRdb(final IRdb<RS> pRdb) {
    this.rdb = pRdb;
  }

  /**
   * <p>Getter for i18n.</p>
   * @return II18n
   **/
  public final II18n getI18n() {
    return this.i18n;
  }

  /**
   * <p>Setter for i18n.</p>
   * @param pI18n reference
   **/
  public final void setI18n(final II18n pI18n) {
    this.i18n = pI18n;
  }

  /**
   * <p>Getter for srvClVl.</p>
   * @return SrvClVl
   **/
  public final SrvClVl getSrvClVl() {
    return this.srvClVl;
  }

  /**
   * <p>Setter for srvClVl.</p>
   * @param pSrvClVl reference
   **/
  public final void setSrvClVl(final SrvClVl pSrvClVl) {
    this.srvClVl = pSrvClVl;
  }

  /**
   * <p>Getter for isAndr.</p>
   * @return boolean
   **/
  public final boolean getIsAndr() {
    return this.isAndr;
  }

  /**
   * <p>Setter for isAndr.</p>
   * @param pIsAndr reference
   **/
  public final void setIsAndr(final boolean pIsAndr) {
    this.isAndr = pIsAndr;
  }

  /**
   * <p>Getter for hlTyEnSr.</p>
   * @return IHlIntCls
   **/
  public final IHlIntCls getHlTyEnSr() {
    return this.hlTyEnSr;
  }

  /**
   * <p>Setter for hlTyEnSr.</p>
   * @param pHlTyEnSr reference
   **/
  public final void setHlTyEnSr(final IHlIntCls pHlTyEnSr) {
    this.hlTyEnSr = pHlTyEnSr;
  }
}
