<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>Beigesoft™ libraries for rapid development of cross-platform financial WEB-applications.</title>
   </properties>

  <body>

    <section name="Basic information about using Beigesoft™ libraries.">

    <p>* this is probably a difficult article for beginners, especially second part, so just take a glance and go to the next article.</p>

    <h4>Implementation of persistable models (that are stored in a database).</h4>
    <p>* they are also called - entity</p>
    <p>
      There are two types of persistable models: synchronized between databases and not.
    </p>
    <h5>Synchronized between databases models</h5>
    <p>
      The same models can be created in all databases, and can be synchronized (by explicit or implicit ID).
      There are synchronized models with non-autogenerated ID (globally recognized ID) and with autogenerated ID with implicit born ID.
      For example Customer A with non-autogenerated ID that is used phone number for its ID.
      It can be created and used at the same time in different databases with no problem after replication (data exchanging).
      For entities like an Invoice and its lines you should use autogenerated ID with implicit born ID. This is triple of autogenerated integer ID in current DB, ID of database where model was burn and ID burn in case if it's a foreign model.
      This is more fast and cross platform alternative to UUID. Two different invoices can be created in different databases (e.g. Office A and Office B) and they can be imported into central database with no collision.
    </p>
    <p>
      Example of models with non-autogenerated ID (globally recognized ID) in <b>beige-blc.jar</b>:
      <ul>
        <li>org.beigesoft.mdlp.Lng - ID is String, e.g. "en" or "ru"</li>
        <li>org.beigesoft.mdlp.CsvMth - ID is Long</li>
        <li>org.beigesoft.mdlp.CsvCl - ID is Long, it's line of CsvMth</li>
      </ul>
      Any document and its line in <b>beige-acc.jar</b> has autogenerated ID with implicit born ID.
    </p>
    <h5>Non-synchronized between databases models</h5>
    <p>
      They are created in only database. There is no need (usually) to export them into another database.
      They have simplest automatically generated integer ID. For example buyer's cart (and its lines) in the web-store database.
      It's created only in web-store database, but it can be imported into accounting database.
    </p>

    <h5>Basic Beige-ORM models</h5>
    <p>Any database model must have ID and Version. Version is used for optimistic locking, replication and tracking purposes. Any entity has also "isNew" field to decide - "should it be inserted or updated". Base models implement this.</p>
    <p>To make your model ready for beige ORM, you should make it a child of (extend or implement):
      <ul>
        <li>org.beigesoft.mdl.IHasId - basic interface</li>
        <li>org.beigesoft.mdl.AIdStr - abstract model with ID of type String</li>
        <li>org.beigesoft.mdl.AIdLn - abstract model with non-autogenerated ID of type Long</li>
        <li>org.beigesoft.mdl.AIdLnNm - abstract model with non-autogenerated ID of type Long that has Name</li>
        <li>org.beigesoft.mdl.AOrId - abstract model with autogenerated ID with implicit born ID (for synchronized between databases)</li>
        <li>org.beigesoft.mdl.AOrIdNm - abstract model with autogenerated ID with implicit born ID (for synchronized between databases)</li>
        <li>org.beigesoft.mdl.AIdLna - abstract model with autogenerated ID of type Long (for non-synchronized between databases)</li>
        <li>...</li>
      </ul>
      Owned lists (e.g. invoice lines) must implement/extend:
      <ul>
        <li>org.beigesoft.mdl.IOwned - basis interface</li>
        <li>org.beigesoft.mdlp.IOwnedOr - interface for model with autogenerated ID with implicit born ID (for synchronized between databases)</li>
        <li>org.beigesoft.mdlp.IOwnedi - interface for model with non-autogenerated Long ID (for synchronized between databases)</li>
        <li>org.beigesoft.mdlp.IOwneda - interface for model with autogenerated ID (for non-synchronized between databases)</li>
      </ul>
    </p>
    <h5>Models with composite (complex) ID</h5>
    <p>Beige-ORM supports any complex ID. For example models from <b>beige-acc.jar</b>:
      <ul>
        <li>org.beigesoft.ws.mdlp.Deliv - has ID of type enumeration</li>
        <li>org.beigesoft.ws.mdlp.Cart - has ID of type Buyer</li>
        <li>org.beigesoft.acc.mdlp.WrhItm - item in warehouse with triple ID (Item, UOM, Warehouse place)</li>
      </ul>
    </p>
    </section>

  </body>

</document>
