<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>Беижсофт™ ПО для быстрой разработки кросс-платформенного финансового ПО с ВЕБ-интерфейсом.</title>
   </properties>

  <body>

    <section name="Пример простой системы заказа товара. Часть 2, облачная WAR версия.">

    <h4>Создание WAR Мавен проекта</h4>

    <p>Создайте папку проекта "myappweb" и файл <b>pom.xml</b> в ней:
<pre style="white-space: pre-wrap;">
&lt;?xml version="1.0"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;org.myapp&lt;/groupId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;artifactId&gt;ordering-web&lt;/artifactId&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;

  &lt;name&gt;My ordering WEB-application.&lt;/name&gt;
  &lt;inceptionYear&gt;2019&lt;/inceptionYear&gt;

  &lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;java.version&gt;1.7&lt;/java.version&gt;
  &lt;/properties&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.myapp&lt;/groupId&gt;
      &lt;artifactId&gt;ordering&lt;/artifactId&gt;
      &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.beigesoft&lt;/groupId&gt;
      &lt;artifactId&gt;beige-web-jar&lt;/artifactId&gt;
      &lt;version&gt;1.0&lt;/version&gt;
      &lt;exclusions&gt;
        &lt;exclusion&gt;
          &lt;groupId&gt;org.beigesoft&lt;/groupId&gt;
          &lt;artifactId&gt;beige-blc&lt;/artifactId&gt;
        &lt;/exclusion&gt;
      &lt;/exclusions&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.taglibs&lt;/groupId&gt;
      &lt;artifactId&gt;taglibs-standard-spec&lt;/artifactId&gt;
      &lt;version&gt;1.2.5&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.taglibs&lt;/groupId&gt;
      &lt;artifactId&gt;taglibs-standard-impl&lt;/artifactId&gt;
      &lt;version&gt;1.2.5&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.beigesoft&lt;/groupId&gt;
      &lt;artifactId&gt;beige-web&lt;/artifactId&gt;
      &lt;version&gt;1.0&lt;/version&gt;
      &lt;type&gt;war&lt;/type&gt;
      &lt;scope&gt;runtime&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;

  &lt;build&gt;
    &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;
    &lt;resources&gt;
      &lt;!--Apache Tomcat7 loads jars ordered by name, so beige-blc.jar
      is loaded first. Placing ordered resources
      to the WEB-INF/classes folder resolves this problem:--&gt;
      &lt;resource&gt;
        &lt;directory&gt;..${file.separator}myapp${file.separator}src${file.separator}main${file.separator}resources&lt;/directory&gt;
      &lt;/resource&gt;
    &lt;/resources&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.5.2&lt;/version&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.8.2&lt;/version&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.7&lt;/version&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.22.1&lt;/version&gt;
        &lt;configuration&gt;
          &lt;useSystemClassLoader&gt;false&lt;/useSystemClassLoader&gt;
          &lt;useFile&gt;false&lt;/useFile&gt;
          &lt;trimStackTrace&gt;false&lt;/trimStackTrace&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;version&gt;3.1&lt;/version&gt;
        &lt;configuration&gt;
          &lt;source&gt;${java.version}&lt;/source&gt;
          &lt;target&gt;${java.version}&lt;/target&gt;
          &lt;compilerArgs&gt;
            &lt;arg&gt;-Xlint:all,-options,-path&lt;/arg&gt;
          &lt;/compilerArgs&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
        &lt;version&gt;3.1.0&lt;/version&gt;
        &lt;configuration&gt;
          &lt;overlays&gt;
            &lt;overlay /&gt;
            &lt;overlay&gt;
              &lt;groupId&gt;org.beigesoft&lt;/groupId&gt;
              &lt;artifactId&gt;beige-web&lt;/artifactId&gt;
              &lt;excludes&gt;
                &lt;exclude&gt;META-INF${file.separator}BEIGESOF.RSA&lt;/exclude&gt;
                &lt;exclude&gt;META-INF${file.separator}BEIGESOF.SF&lt;/exclude&gt;
              &lt;/excludes&gt;
            &lt;/overlay&gt;
          &lt;/overlays&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  
&lt;/project&gt;
</pre>
<p>
  * Это будет WAR архив ВЕБ-приложения по стандарту Джава Интерпрайз Едишин. И WAR и JAR в действительности ZIP архивы.
</p>
Создайте папки для исходного кода:
<pre style="white-space: pre-wrap;">
 myappweb - src - main - java - org - myapp - ordering
 myappweb - src - main - webapp - WEB-INF - jsp
 myappweb - src - main - webapp - META-INF
</pre>
</p>
    <h4>Добавление ИС моделей в меню ВЕБ-интерфейса</h4>
    <p>Скопируйте <b>dsk.jsp</b> из базовой библиотеки <b>beige-web</b> в "myappweb - src - main - webapp - WEB-INF - jsp" и добавьте HTML DIV элемент класса "dropdown" содержащий модели аналогично существующему меню:
<pre style="white-space: pre-wrap;">
...
&lt;div class="navbar"&gt;
  &lt;div class="dropdown"&gt;
    &lt;a href="#" class="dropdown-btn"&gt;${i18n.getMsg("Ordering", rvs.upf.lng.iid)}&lt;/a&gt;
    &lt;div class="dropdown-content"&gt;
      &lt;a href="#" onclick="bsGtAjx('GET', 'srv?act=lst&amp;rnd=lhj&amp;ent=Customer&amp;pg=1');"&gt;${i18n.getMsg("Customers", rvs.upf.lng.iid)}&lt;/a&gt;
      &lt;a href="#" onclick="bsGtAjx('GET', 'srv?act=lst&amp;rnd=lhj&amp;ent=Merchandise&amp;pg=1');"&gt;${i18n.getMsg("Merchandises", rvs.upf.lng.iid)}&lt;/a&gt;
      &lt;a href="#" onclick="bsGtAjx('GET', 'srv?act=lst&amp;rnd=lhj&amp;ent=COrder&amp;pg=1');"&gt;${i18n.getMsg("Orders", rvs.upf.lng.iid)}&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="dropdown"&gt;
...
</pre>
Сделайте тоже для Мобильного вида - mbl.jsp.
    </p>

    <h4>web.xml</h4>
    <p>Скопируйте <b>web-sqlite.xml</b> из исходного кода <b>beige-web</b> в папку "myappweb - src - main - webapp - WEB-INF", переименуйте его в "web.xml" и измените класс фабрики приложения:
<pre style="white-space: pre-wrap;">
...
&lt;context-param&gt;
  &lt;param-name&gt;fctAppCls&lt;/param-name&gt;
  &lt;param-value&gt;org.myapp.ordering.FctAppSqlt&lt;/param-value&gt;
&lt;/context-param&gt;
...
</pre>
<b>web.xml</b> это главный файл описывающий ВЕБ-приложение по стандарту JEE.
    </p>

    <h4>Создание фабрики приложения для WAR версии</h4>
    <p>
      Фабрика приложения это класс создающий все сервисы (в том числе вложенные фабрики) данного приложения в режиме "инициализация по запросу". Например сервис создающий PDF отчет будет создан когда пользователь нажмет "печать заказа в ПДФ".
      Фабрики для разных платформ (ОС) отличаются.
      На данный момент просто скопируйте файл org.beigesoft.war.FctAppSqlt.java из "beige-web" в "myappweb - src - main - java - org - myapp - ordering"
      и измените путь его "Пакета" (package).
    </p>

    <h4>Авторизация через базу данных (JEE JDBC authentication)</h4>
    <p>Для Томкэт стандарта нужно скопировать <b>context-sqlt.xml</b> из <b>beige-web</b> в "myappweb - src - main - webapp - META-INF" и переименовать его в "context.xml", затем изменить путь к базе данных:
<pre style="white-space: pre-wrap;">
...
connectionURL="jdbc:sqlite:../webapps/ordering-web/myordering.sqlite"
...
</pre>
    
    </p>

    <h4>Первый запуск</h4>
    <p>Используя терминал (Power Shell) запустите команду "mvn clean install" в корне папок обоих проектов (где pom.xml), конечно сперва в <b>myapp</b> затем в <b>myappweb</b>. Скомпилированные библиотеки <b>ordering.jar</b> и <b>ordering-web.war</b> будут в папке "target".
    Запустите Томкэт дважды щелкнув файл "startup.bat" для Виндоус или "startup.sh" для Юникс-подобной ОС в папке Томкэта "bin".
    Скопируйте ordering-web.war в папку Томкэта "webapps". Томкэт развернет и запустит приложения, приложение создаст и заполнит СКЛайт (SQLite) базу данных "ordering-web/myordering.sqlite" 
<p>Вы должны были установить базу данных Эйч2 (H2) описанную во третьей статье. Запустите утилиту Эйч2 консоль (H2 console): в папке "bin" запустите "h2.bat" (Виндоус) или "h2.sh" (Юникс подобная ОС). Браузер откроет интерфейс данной утилиты,
выберите "Сохранить настройки"-"Generic SQLite" и напишите путь к базе данных в JDBC URL, например "jdbc:sqlite:C:\programmer\java\apache-tomcat-7.0.96\webapps\ordering-web\myordering.sqlite", пользователь и пароль не важны:
<p align="center"><img style="max-width: 100%" src="images/h2setru.png" /></p>
Нажмите "Соединиться", Эйч2 консоль покажет все созданные таблицы, для авторизации нужно добавить пользователей и их пароли, скопируйте следующие команды в окно консоли и исполните их:
<pre style="white-space: pre-wrap;">
insert into USTMC (USR, PWD, VER) values ('admin', 'admin', 1);
insert into USTMC (USR, PWD, VER) values ('user', 'user', 1);
insert into USRLTMC (USR, ROL, VER)  values ('admin', 'admin', 1);
insert into USRLTMC (USR, ROL, VER)  values ('user', 'user', 1);
</pre>
</p>

<p>* смотрите конец <b>web.xml</b> где описаны роли и пути требующие авторизации.</p>

После этого вы можете авторизоваться для работы с заказами (пользователь/пароль admin/admin), наберите в браузере "http://localhost:8080/ordering-web":
<p align="center"><img style="max-width: 100%" src="images/editcordru.png" /></p>
Списки ИС моделей, формы их редактирования и их подборщик будут сгенерированны автоматически.
    </p>

    <h4>Интернационализация</h4>
    <p>Для интернационализации используйте ${i18n.getMsg("COrder", rvs.upf.lng.iid)} в странице JSP.
    Нужно добавить все сообщения по Русски в <b>Msgs_ru_RU-UTF8.properties</b> и по Английски в <b>Msgs_en_US.properties</b>.
    Скопируйте эти файлы из <b>beige-blc/src/main/resources</b> и измените. После нужно перекодировать UTF8 в ASCII кодировку:
<pre style="white-space: pre-wrap;">
native2ascii -encoding UTF-8 Msgs_ru_RU-UTF8.properties Msgs_ru_RU.properties
</pre>
Бизнес часто имеет дело с иностранными поставщиками и/или покупателями.
Не стоит пренебрегать интернационализацией.
Даже не все крупные ВЕБ-магазины могут похвастаться интернационализацией подобной той, что реализована в ВЕБ-магазине Беижсофт ЕИС.
    </p>

    <h4>Заключение</h4>
    <p>Это простейший пример. ИТОГО нужно заполнять вручную. В дальнейшем мы доработаем приложение для автоматического расчета итогов.</p>

    </section>

  </body>

</document>
