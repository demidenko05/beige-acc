<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>Беижсофт™ ПО для быстрой разработки кроссс-платформенного финансового ПО с ВЕБ-интерфейсом.</title>
   </properties>

  <body>

    <section name="Базовая информация о ПО Беижсофт.">

    <p>* приведенная информация сложна для незнакомых с программированием, особенно вторая часть.</p>

    <h4>Программирование информационных моделей сохраняемых в базу данных.</h4>
    <p>* это такие модели как Накладная, Котнрагент...</p>
    <p>* сдесь для краткости используется термин "ИС модель"</p>
    <p>
      Есть два типа ИС моделей: синхронизируемые между базами данных и нет.
    </p>
    <h5>Синхронизируемые между базами данных ИС модели</h5>
    <p>Синхронизируемые модели могут быть созданы в разных базах данных и затем синхронизированы с использованием их явного или неявного кода (идентификатора).
      Есть два типа синхронизируемых ИС моделей:
      <ul>
        <li>модели с глобальным кодом</li>
        <li>модели с автоматически генерируемым кодом и неявный кодом рождения, то есть они имеют идентификатор состоящий из автоматического кода в текущей базе, код базы рождения и код в базе рождения для имортной модели, это более быстрая и кросс-платформенная альтернатива широко используемую ГУИД идентификатору</li>
      </ul>
      Пример первого типа это контрагент в качестве кода которого используется ИНН. Одинаковые модели первого типа могут быть созданы и использованы в разных базах в одно время, не нужно ждать обмена с главной базы чтобы работать.
      Пример моделей вторго типа - Накладная или ее строка. Разные накладные могут быть созданы в разных периферийных базах, затем импортированы в центральную без коллизий.
    </p>
    <p>
      Пример моделей первого типа из базовой библиотеки <b>beige-blc.jar</b>:
      <ul>
        <li>org.beigesoft.mdlp.Lng - Языки, в качестве кода используется глобальный строковый код, например "en" or "ru"</li>
        <li>org.beigesoft.mdlp.CsvMth - CSV метод, Код длинное целое</li>
        <li>org.beigesoft.mdlp.CsvCl - строка CSV метода, Код длинное целое</li>
      </ul>
      Любой документ и номенклатура в <b>beige-acc.jar</b> это модели второго типа.
      Если нужно иметь одинаковую номенклатуру в разных базах, то необходимо ждать импорта из главной "родительской" базы.
    </p>
    <h5>Несинхронизируемые между базами данных ИС модели</h5>
    <p>
      Такие модели не нуждаются в импорте. В любом случае они создаются только в одной базе данных.
      Данные модели имебю  простой автоматически генерируемый код. Пример таких моделей - корзина и ее строки в базе ВЕБ-магазина.
    </p>

    <h5>Базовые Беижсофт ОРМ ИС модели</h5>
    <p>Любая ИС модель должна иметь идентификатор (код), версию для экспорта, импорта и блокировки при редактировании. Также имеют поле "isNew" - "новая" для принятия решения создавать в базе данных новую запись или изменить существующую.
      Базовые модели имеют все эти свойства (поля).</p>
    <p>Чтобы сделать вашу модель рабочей для Беижсофт ОРМ, вы должны сделать её потомком базовой ИС модели.
      В Джава это делается словами "extend" или "implement":
      <ul>
        <li>org.beigesoft.mdl.IHasId - базовый интерфейс</li>
        <li>org.beigesoft.mdl.AIdStr - абстрактная модель с кодом строкового типа String</li>
        <li>org.beigesoft.mdl.AIdLn - абстрактная модель с неавтоматическим кодом числового типа Long</li>
        <li>org.beigesoft.mdl.AIdLnNm - абстрактная модель с неавтоматическим кодом числового типа Long и с полем Nme (Имя)</li>
        <li>org.beigesoft.mdl.AOrId - абстрактная модель с автоматическим кодом и неявный кодом рождения (синхронизируемая между БД)</li>
        <li>org.beigesoft.mdl.AOrIdNm - абстрактная модель с автоматическим кодом и неявный кодом рождения (синхронизируемая между БД)</li>
        <li>org.beigesoft.mdl.AIdLna - абстрактная модель с автоматическим кодом (несинхронизируемая между БД)</li>
        <li>...</li>
      </ul>
      Владеемые записи (например строки накладной) должны implement/extend:
      <ul>
        <li>org.beigesoft.mdl.IOwned - базовый интерфейс</li>
        <li>org.beigesoft.mdlp.IOwnedi - интерфейс с неавтоматическим кодом числового типа Long</li>
        <li>org.beigesoft.mdlp.IOwnedOr - интерфейс с автоматическим кодом и неявный кодом рождения (синхронизируемая между БД)</li>
        <li>org.beigesoft.mdlp.IOwneda - интерфейс с автоматическим кодом (несинхронизируемая между БД)</li>
      </ul>
    </p>
    <h5>Модели со сложным идентификатором</h5>
    <p>Беижсофт ОРМ поддерживает идентификаторы любой сложности. Например модели из Беижсофт ИСП <b>beige-acc.jar</b>:
      <ul>
        <li>org.beigesoft.ws.mdlp.Deliv - Доставка, код типа перечисление (enumeration)</li>
        <li>org.beigesoft.ws.mdlp.Cart - Корзина имеет идентификатор типа Покупатель (другая ИС модель) (Buyer)</li>
        <li>org.beigesoft.acc.mdlp.WrhItm - номенклатура на складе с тройным идентификатором - Номменклатура (Item), ЕдиницаИзмерения (UOM), Место в складе (WrhPl)</li>
      </ul>
    </p>
    </section>

  </body>

</document>
