<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>Beigesoftâ„¢ libraries for rapid development of cross-platform financial WEB-applications.</title>
   </properties>

  <body>

    <section name="Example of simple ordering application. Part 2, cloud WAR version.">

    <h4>Creating WAR Maven project</h4>
    <p>* All files must be in UTF-8 format. I recommend <b>Jeany</b> editor.</p>
    <p>Create project folder "myappweb", then create <b>pom.xml</b> in it:
<pre style="white-space: pre-wrap;">
&lt;?xml version="1.0"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;org.myapp&lt;/groupId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;artifactId&gt;ordering-web&lt;/artifactId&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;

  &lt;name&gt;My ordering WEB-application.&lt;/name&gt;
  &lt;inceptionYear&gt;2019&lt;/inceptionYear&gt;

  &lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;java.version&gt;1.7&lt;/java.version&gt;
  &lt;/properties&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.myapp&lt;/groupId&gt;
      &lt;artifactId&gt;ordering&lt;/artifactId&gt;
      &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.beigesoft&lt;/groupId&gt;
      &lt;artifactId&gt;beige-web-jar&lt;/artifactId&gt;
      &lt;version&gt;1.0&lt;/version&gt;
      &lt;exclusions&gt;
        &lt;exclusion&gt;
          &lt;groupId&gt;org.beigesoft&lt;/groupId&gt;
          &lt;artifactId&gt;beige-blc&lt;/artifactId&gt;
        &lt;/exclusion&gt;
      &lt;/exclusions&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.taglibs&lt;/groupId&gt;
      &lt;artifactId&gt;taglibs-standard-spec&lt;/artifactId&gt;
      &lt;version&gt;1.2.5&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.taglibs&lt;/groupId&gt;
      &lt;artifactId&gt;taglibs-standard-impl&lt;/artifactId&gt;
      &lt;version&gt;1.2.5&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.beigesoft&lt;/groupId&gt;
      &lt;artifactId&gt;beige-web&lt;/artifactId&gt;
      &lt;version&gt;1.0&lt;/version&gt;
      &lt;type&gt;war&lt;/type&gt;
      &lt;scope&gt;runtime&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;

  &lt;build&gt;
    &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;
    &lt;resources&gt;
      &lt;!--Apache Tomcat7 loads jars ordered by name, so beige-blc.jar
      is loaded first. Placing ordered resources
      to the WEB-INF/classes folder resolves this problem:--&gt;
      &lt;resource&gt;
        &lt;directory&gt;..${file.separator}myapp${file.separator}src${file.separator}main${file.separator}resources&lt;/directory&gt;
      &lt;/resource&gt;
    &lt;/resources&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.5.2&lt;/version&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.8.2&lt;/version&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.7&lt;/version&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.22.1&lt;/version&gt;
        &lt;configuration&gt;
          &lt;useSystemClassLoader&gt;false&lt;/useSystemClassLoader&gt;
          &lt;useFile&gt;false&lt;/useFile&gt;
          &lt;trimStackTrace&gt;false&lt;/trimStackTrace&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;version&gt;3.1&lt;/version&gt;
        &lt;configuration&gt;
          &lt;source&gt;${java.version}&lt;/source&gt;
          &lt;target&gt;${java.version}&lt;/target&gt;
          &lt;compilerArgs&gt;
            &lt;arg&gt;-Xlint:all,-options,-path&lt;/arg&gt;
          &lt;/compilerArgs&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
        &lt;version&gt;3.1.0&lt;/version&gt;
        &lt;configuration&gt;
          &lt;overlays&gt;
            &lt;overlay /&gt;
            &lt;overlay&gt;
              &lt;groupId&gt;org.beigesoft&lt;/groupId&gt;
              &lt;artifactId&gt;beige-web&lt;/artifactId&gt;
              &lt;excludes&gt;
                &lt;exclude&gt;META-INF${file.separator}BEIGESOF.RSA&lt;/exclude&gt;
                &lt;exclude&gt;META-INF${file.separator}BEIGESOF.SF&lt;/exclude&gt;
              &lt;/excludes&gt;
            &lt;/overlay&gt;
          &lt;/overlays&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  
&lt;/project&gt;
</pre>
<p>
  * this is WAR archive of JEE WEB application. Both WAR and JAR is actually ZIP archives.
</p>
Then create folders for source code:
<pre style="white-space: pre-wrap;">
 myappweb - src - main - java - org - myapp - ordering
 myappweb - src - main - webapp - WEB-INF - jsp
 myappweb - src - main - webapp - META-INF
</pre>
</p>
    <h4>Adding the models in the menu</h4>
    <p>Copy <b>dsk.jsp</b> from <b>beige-web</b> project into "myappweb - src - main - webapp - WEB-INF - jsp" and add drop-down menu with entities:
<pre style="white-space: pre-wrap;">
...
&lt;div class="navbar"&gt;
  &lt;div class="dropdown"&gt;
    &lt;a href="#" class="dropdown-btn"&gt;${i18n.getMsg("Ordering", rvs.upf.lng.iid)}&lt;/a&gt;
    &lt;div class="dropdown-content"&gt;
      &lt;a href="#" onclick="bsGtAjx('GET', 'srv?act=lst&amp;rnd=lhj&amp;ent=Customer&amp;pg=1');"&gt;${i18n.getMsg("Customers", rvs.upf.lng.iid)}&lt;/a&gt;
      &lt;a href="#" onclick="bsGtAjx('GET', 'srv?act=lst&amp;rnd=lhj&amp;ent=Merchandise&amp;pg=1');"&gt;${i18n.getMsg("Merchandises", rvs.upf.lng.iid)}&lt;/a&gt;
      &lt;a href="#" onclick="bsGtAjx('GET', 'srv?act=lst&amp;rnd=lhj&amp;ent=COrder&amp;pg=1');"&gt;${i18n.getMsg("Orders", rvs.upf.lng.iid)}&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="dropdown"&gt;
...
</pre>
And make mbl.jsp in the same way.
    </p>

    <h4>web.xml</h4>
    <p>Copy <b>web-sqlite.xml</b> from <b>beige-web</b> project into "myappweb - src - main - webapp - WEB-INF" rename it to "web.xml" and change application factory class:
<pre style="white-space: pre-wrap;">
...
&lt;context-param&gt;
  &lt;param-name&gt;fctAppCls&lt;/param-name&gt;
  &lt;param-value&gt;org.myapp.ordering.FctAppSqlt&lt;/param-value&gt;
&lt;/context-param&gt;
...
</pre>
    </p>

    <h4>Creating application factory for WAR version</h4>
    <p>
      At this time just copy file org.beigesoft.war.FctAppSqlt.java into "myappweb - src - main - java - org - myapp - ordering"
      and change its package.
    </p>

    <h4>JDBC authentication</h4>
    <p>For Tomcat copy <b>context-sqlt.xml</b> from <b>beige-web</b> into "myappweb - src - main - webapp - META-INF" rename it to "context.xml" and change database url:
<pre style="white-space: pre-wrap;">
...
connectionURL="jdbc:sqlite:../webapps/ordering-web/myordering.sqlite"
...
</pre>
    
    </p>

    <h4>The first start</h4>
    <p>Compile both projects by executing "mvn clean install" at the root folder of each project (where pom.xml). Generated libraries <b>ordering.jar</b> and <b>ordering-web.war</b> will be in the target folders.
    To start Tomcat run in its "bin" folder "startup.bat" on MS Windows or "startup.sh" on Unix-like OS.
    Copy ordering-web.war into Tomcat "webapps" folder. Application will be deployed, it creates and fills SQLite database "ordering-web/myordering.sqlite" 
<p>You should have installed H2 database as described in 2-nd article. Just run its SQL tool (H2 console): in its "bin" folder run "h2.bat" on MS Windows or "h2.sh" on Unix like OS. Browser will open WEB-interface of its tool,
select "Saved Settings"-"Generic SQLite" and type database address in JDBC URL, e.g. "jdbc:sqlite:C:\programmer\java\apache-tomcat-7.0.96\webapps\ordering-web\myordering.sqlite", do not care about user and password:
<p align="center"><img style="max-width: 100%" src="images/h2setren.png" /></p>
then push "connect", H2 SQL console will show tables, to insert users, just copy these entries and paste into tool window then push "Run":
<pre style="white-space: pre-wrap;">
insert into USTMC (USR, PWD, VER) values ('admin', 'admin', 1);
insert into USTMC (USR, PWD, VER) values ('user', 'user', 1);
insert into USRLTMC (USR, ROL, VER)  values ('admin', 'admin', 1);
insert into USRLTMC (USR, ROL, VER)  values ('user', 'user', 1);
</pre>
</p>

<p>* see bottom of <b>web.xml</b> there is JEE authentication part about roles and secure path.</p>
After that you are able to login into "secure place" and make orders,  type in browser "http://localhost:8080/ordering-web":
<p align="center"><img style="max-width: 100%" src="images/editcord.png" /></p>
Lists, edit forms, entity pickers will be generated automatically.
    </p>
    <h4>Internationalization</h4>
    <p>For internationalization use ${i18n.getMsg("COrder", rvs.upf.lng.iid)} in a JSP page.
    You should add this message into <b>Msgs_en_US.properties</b> and non English e.g. <p>Msgs_ru_RU-UTF8.properties</p>.
    Just copy these files from <b>beige-blc</b> and edit them. After editing make ASCII encoded file for non-English messages, e.g.:
<pre style="white-space: pre-wrap;">
native2ascii -encoding UTF-8 Msgs_ru_RU-UTF8.properties Msgs_ru_RU.properties
</pre>

    </p>
    <h4>Conclusion</h4>
    <p>This is the simplest example. As a result you have to fill Amount=Quantity*Price by hand. In the following articles we will customize application to do all  things automatically.</p>

    </section>

  </body>

</document>
