<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>Beigesoftâ„¢ Accounting</title>
   </properties>

  <body>

    <section name="How to protect your data.">
  
    <p><b>Keywords: encryption, data protection, digital signature.</b></p>

    <h4>Why should you learn about data protection?</h4>
    <p>If you are a business owner or a freelance accountant and data about your customers was leaked, then you will get problems.
      Learning about data protection is not difficult.
    </p>
    
    <h4>The facts.</h4>
    <p>
      <ul>
        <li>
          It was about 2000 year, when a computer with an operating system caught a virus just after connecting to the Internet. That is the user even did not open a WEB-browser. 
        </li>
        <li>
          It was about 2010 year, when a web-browser had enabled a harmful-script on a HTML page, and that script had rewrote the master boot record (the heart of a file system). That virus was trying to force victims to pay money.
        </li>
        <li>
          You never need a lot of features that your software contains, but swindlers use them for cheating you.
        </li>
        <li>
          Your software might be already affected by harmful-software, and you might never know about it, but swindlers know everything from your computer.
        </li>
      </ul>
    </p>

    <h4>What do they do the best for you (to protect your data)?</h4>
    <p>
      <ul>
        <li>They remove or restrict swindler-friendly features, for example an Android application can't read files that belong to another application, and you set by yourself permissions to the shared storage.</li>
        <li>They track activity of your account (all social networks do it). Thus if a swindler stole your password and tried to sign-in under your account from another device, then you will be informed about it (they can even block your account without your request).</li>
        <li>They allow you to use your social network account for authorization in other sites. Using a "master" account to login into other sites is the preferred authorization method, because they track your activity.</li>
        <li>They force you to install software from well known sources such "a software store".</li>
        <li>Of course, things like encryption, free anti-harmful-software.</li>
      </ul>
      * Here "They" means IT specialists - programmers...
    </p>
    
    <h4>What do they do the worst for you?</h4>
    <p>
      <ul>
        <li>They force you to use swindler-friendly features. For example, they force you to install a browser's plugin that requires permissions to your file system,
          or they force you to install and use unsigned software from "untrusted sources" to resolve your problems.</li>
        <li>They place recovering (installation) software on non write-protected places like HDD or flash. Complex harmful-software can poison them (installation files) and break their protection.</li>
        <li>They do not track usage of their digital signature.</li>
      </ul>
      "untrusted sources" means any non-well known Internet sites, especially with non-encrypted HTTP.
    </p>

    <h4>What they must do for you?</h4>
    <p>
      <ul>
        <li>WEB-browser's plugins and page's scripts must be able to access your files only interactively and only via the WEB-browser API. They must have access to their own "sandbox" file-system only via the WEB-browser API.</li>
      </ul>
      This is not difficult. Browsers must have a delegating API for all dangerous things (files access, stdin/stdout ...). Browsers must check that a plugin's binary code is not linked to the dangerous main libraries functions (e.g. GLIBC) or OS ones such as "open a file/descriptor".
    </p>

    <h4>Flexibility leads to vulnerability.</h4>
    <p>A software can be installed statically, e.g. C/C++ binaries, or dynamically, e.g. JavaScript on a HTML page.
    Historically any program has direct access to user's files.
    There are also "holes", i.e. program's errors. 
    Many languages with a JIT compiler had the program error that allows to invoke an arbitrary native (CPU) code.
    And so did JS.
    So, what is the main factor in security vulnerability in this case? Is it allowing JIT to boost a dynamically loaded JS program,
    or is it the "hole" in the JS compiler?
    So, the more software restricted, the less vulnerable it is.
    Restricting definitely reduces the probability of "security holes".
    </p>

    <h4>What do you do the worst for you?</h4>
    <p>
      <ul>
        <li>Install unneeded software (especially from untrusted sources).</li>
        <li>Use weak passwords</li>
        <li>Do not learn about data protection</li>
      </ul>
    </p>

    <h4>Strong passwords.</h4>
    <p>
      The weakest passwords are:
      <ul>
        <li>Of course, similar to "qwerty" passwords - e.g. "admin", "1234567"...</li>
        <li>Generated passwords e.g. "87ghgjs6KYfgluy" - user can't remember such password, and it's forced to stick a note with this password to its monitor.</li>
      </ul>
      Strong passwords are easy to remember. These are a set of words e.g. "raccooneatstone165".
    </p>
    <p>
      Anyway, strong passwords are vulnerable to hidden cameras. Thus saving passwords in a browser is the preferred way.
      But this storage must be under your master account (to track activity). It's also desirable that a browser doesn't save passwords locally, only caches them from account Internet storage.
      You should sign out when you leave your computer for a long time (e.g. a vocation).
    </p>
    
    <h4>How to protect you from swindlers completely?</h4>
    <p>
      There is a way to  protect you from swindlers completely. It's all about encryption, a digital signature, global tracking of using a digital signature, safe storing of a key for digital signature.
    </p>
    <p>
      What is encryption? It's an encoding of a message (text, file...) with an encryption algorithm and a key. An encrypted message is not readable without the key.
    </p>
    <p>
      Symmetric encryption algorithms use a symmetric secret key for encryption and decryption.
    </p>
    <p>
      Asymmetric encryption algorithms use an asymmetric secret (private) key for encryption and an asymmetric public key for decryption.
      Asymmetric algorithms also allow to encrypt information with an asymmetric public key and decrypt it with an asymmetric secret (private) key.
      In these both cases the key, that is used for encryption, cannot be used for decryption.
    </p>
    <p>
      A digital signature is an information encrypted with an asymmetric secret (private) key.
      A public key is available for all, so anyone can use it to decrypt a signature,
      and this successful decryption means that the signature was successfully verified.
    </p>
    <p>A swindler can try to match the private key by using the public one and the signature. But it takes a very long time even for high-performance computers to check (try) all possible keys.
      Thus the common way is to steal the private key, or steal the keystore and retrieve its passphrase.
      You could hear that a quantum computer can easily break a RSA key. A swindler could be lucky to match a secret key to a public one.
      So tracking of a secret key usage is essential.
    </p>
    <p>
      A "device for signing" and "global tracking of using a signature" is a reliable means to resolve these problems. This "Device for signing" makes a signature itself.
      There is no way to get the private key from it. It contains your private key to make your signature and do other security stuff, e.g. reporting to the global tracking server about using your signature.
      Public keys from such devices must be actually non-public, i.e. they must be transferred and stored in a secure way. That is such devices know all current public keys, and they update them on the go.
      The best way is using this device as your only digital passport, thus it also will contain your photo, fingerprints and other information.
      You will use this device for any activity - opening a door (home, car, hotel room), sing-in into a computer and into any Internet site, making bank transfers, ATM money withdrawal, etc.
      You even will not need to use a pin code for making signature, a cashier will check your photo from your device (bank software can do it too), the device itself will check your fingerprints.
      All software must be signed with such devices. This device will make session symmetric secret keys to transfer data over the network (e.g. make HTTPS connection).
      This device will encrypt your data. Again, this device will make all stuff by itself, this is an autonomic "black box".
      So, this is an alternative way to the current encryption infrastructure, that is based on exactly public keys (certificates) that are signed by Certificate Authorities, and there the most stuff is made by hand.
      Of course this requires changing law and adapting software, but finally you will be totally protected from any swindlers activities:
      <ul>
        <li>from stealing your money or private information (violence against you)</li>
        <li>from faking news (violence against democracy)</li>
        <li>from faking ratings, duplicates and other spam activity (violence against free market)</li>
        <li>from exploiting security holes in software</li>
      </ul>
      And finally you do not have to learn about security at all, to think of passwords...
    </p>
    
    <h4>Example of preventing data leakage due the security hole "allowing already authorized users to request data for another user ID".</h4>
    <p>You might have heard that a bank software had this "hole". Assume, in the future a bank will have this security hole. So, a swindler will have access to other users data.
    But HTTPS connection and authorization will be made by using its personal device for signing. So, the global tracking server will store this information forever.
    Banks usually store logs for a quite long time. So, after revealing the hole, the bank will retrieve all harmful requests from the logs.
    Would be a swindler so stupid to reveal and exploit security holes while all activities is signed with its personal device? That is, it can't steal another user password and other data such as IP and MAC address to make fake requests to avoid unmasking, as it does today.
    </p>

    </section>

  </body>

</document>
