<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>Беижсофт™ ПО для быстрой разработки кросс-платформенного финансового ПО с ВЕБ-интерфейсом.</title>
   </properties>

  <body>

    <section name="Пример простой системы заказа товара. Часть 1, базовая бизнес логика.">

    <h4>ИС модели.</h4>
    <p>
      Реализуем данные простые модели:
      <ul>
        <li>Customer - Контрагент, имеет имя</li>
        <li>Merchandise - Номенклатура, имеет имя</li>
        <li>CОrder - Заказ, имеет дату, контрагента, итого, строки с товаром</li>
        <li>OrderLine - Строка заказа, имеет товар, количество, цену, итого</li>
      </ul>
    </p>
    
    <h4>Создание Мавен проекта.</h4>
    <p><i>* Все файлы должны быть в UTF-8 кодировке. Я рекомендую редактор <b>Jeany</b>.</i></p>
    <p>Создайте папку проекта "myapp" в "programmer/java", и создайте <b>pom.xml</b> в ней:
<pre style="white-space: pre-wrap;">
&lt;?xml version="1.0"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;org.myapp&lt;/groupId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;artifactId&gt;ordering&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;name&gt;My ordering business logic.&lt;/name&gt;
  &lt;inceptionYear&gt;2019&lt;/inceptionYear&gt;

  &lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;java.version&gt;1.7&lt;/java.version&gt;
  &lt;/properties&gt;

        
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.beigesoft&lt;/groupId&gt;
      &lt;artifactId&gt;beige-blc&lt;/artifactId&gt;
      &lt;version&gt;1.0&lt;/version&gt;
      &lt;exclusions&gt;
        &lt;exclusion&gt;
          &lt;groupId&gt;com.zaxxer&lt;/groupId&gt;
          &lt;artifactId&gt;HikariCP&lt;/artifactId&gt;
        &lt;/exclusion&gt;
      &lt;/exclusions&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;

  &lt;build&gt;
    &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.5.2&lt;/version&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.8.2&lt;/version&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.7&lt;/version&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.22.1&lt;/version&gt;
        &lt;configuration&gt;
          &lt;useSystemClassLoader&gt;false&lt;/useSystemClassLoader&gt;
          &lt;useFile&gt;false&lt;/useFile&gt;
          &lt;trimStackTrace&gt;false&lt;/trimStackTrace&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;version&gt;3.1&lt;/version&gt;
        &lt;configuration&gt;
          &lt;source&gt;${java.version}&lt;/source&gt;
          &lt;target&gt;${java.version}&lt;/target&gt;
          &lt;compilerArgs&gt;
            &lt;!--&lt;arg&gt;-verbose&lt;/arg&gt;--&gt;
            &lt;arg&gt;-Xlint:all,-options,-path&lt;/arg&gt;
          &lt;/compilerArgs&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  
&lt;/project&gt;
</pre>
<p>*<b>pom.xml</b> это главный файл в Мавен проекте. Он описывает данную библиотеку (Мавен артефакт): имя, группу, версию, тип архива (JAR в данном случае), используемые сторонние библиотеки (зависимости/dependencies).
JAR это стандартный Java архив содержащий скомпилированные Java классы и другие файлы - настройки в текстовых и XML файлах, изображения и прочее.
</p>
Затем создайте папки для исходного кода:
<pre style="white-space: pre-wrap;">
myapp - src - main - java - org - myapp - ordering
myapp - src - main - resources - dbcp
myapp - src - main - resources - sqlite
myapp - src - main - resources - uvd - clsCs
myapp - src - main - resources - uvd - fldTyFs
</pre>
    </p>
    
    <h4>Реализация моделей.</h4>
    <p>Согласно <a href="bclbasicru.html">Базовая информация о ПО Беижсофт</a> мы должны использовать <b>org.beigesoft.mdlp.AIdLnNm</b> для Контрагента (Customer), создайте файл "Customer.java" в папке "myapp - src - main - java - org - myapp - ordering":
<pre style="white-space: pre-wrap;">
package org.myapp.ordering;

import org.beigesoft.mdlp.AIdLnNm;

public class Customer extends AIdLnNm {

}
</pre>
    </p>
<p>
  * Джава класс имеет поля(реквизиты), например поле <b>nme</b> строкового типа (String) используется для хранения имени. Данные поля доступны через методы <b>Getters</b> и <b>Setters</b>,
  например для поля "nme" метод "getNme()" возвращает его значение, а setNme(String pValue) устанавливает значение.
</p>
<p>
  * В Джаве слово <b>extends</b> значит что данный класс расширяет другой класс (AIdLnNm в данном случае). Результирующий класс наследует (имеет) все поля и методы родительского класса.
</p>
<p>
  * Как вы заметили, класс имеет имя такое-же как и его файл, а имя пакета (package) совпадает с папками начиная с папки "java".
</p>
<p>
  Класс в данном случае реализует информационную  сохраняемую (в БД) модель. Другие классы имеют функции сервиса, например сервис записывающий модель в базу данных.
</p>
  <p>
  Предположим что у нас несколько баз данных (офис 1 и офис 2) и большая номенклатура, поэтому будем использовать <b>org.beigesoft.mdlp.AOrIdNm</b> для товара:
<pre style="white-space: pre-wrap;">
package org.myapp.ordering;

import org.beigesoft.mdlp.AOrIdNm;

public class Merchandise extends AOrIdNm {

}
</pre>
    Нам нужно импортировать заказы в центральную базу, соответственно Заказ будет:
<pre style="white-space: pre-wrap;">
package org.myapp.ordering;

import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

import org.beigesoft.mdlp.AOrId;

public class COrder extends AOrId {

  private Date itsDate;
  
  private Customer customer;
  
  private BigDecimal itsTotal;
  
  private List&lt;OrderLine&gt; itsLines;

  //Simple getters and setters:
  /**
   * &lt;p&gt;Getter for itsDate.&lt;/p&gt;
   * @return Date
   **/
  public final Date getItsDate() {
    return this.itsDate;
  }

  /**
   * &lt;p&gt;Setter for itsDate.&lt;/p&gt;
   * @param pItsDate reference
   **/
  public final void setItsDate(final Date pItsDate) {
    this.itsDate = pItsDate;
  }

  /**
   * &lt;p&gt;Getter for customer.&lt;/p&gt;
   * @return Customer
   **/
  public final Customer getCustomer() {
    return this.customer;
  }

  /**
   * &lt;p&gt;Setter for customer.&lt;/p&gt;
   * @param pCustomer reference
   **/
  public final void setCustomer(final Customer pCustomer) {
    this.customer = pCustomer;
  }

  /**
   * &lt;p&gt;Getter for itsTotal.&lt;/p&gt;
   * @return BigDecimal
   **/
  public final BigDecimal getItsTotal() {
    return this.itsTotal;
  }

  /**
   * &lt;p&gt;Setter for itsTotal.&lt;/p&gt;
   * @param pItsTotal reference
   **/
  public final void setItsTotal(final BigDecimal pItsTotal) {
    this.itsTotal = pItsTotal;
  }

  /**
   * &lt;p&gt;Getter for itsLines.&lt;/p&gt;
   * @return List&lt;OrderLine&gt;
   **/
  public final List&lt;OrderLine&gt; getItsLines() {
    return this.itsLines;
  }

  /**
   * &lt;p&gt;Setter for itsLines.&lt;/p&gt;
   * @param pItsLines reference
   **/
  public final void setItsLines(final List&lt;OrderLine&gt; pItsLines) {
    this.itsLines = pItsLines;
  }
}
</pre>
  </p>
<p>
  <b>* для избежания коллизий с именами СКЛ (SQL) нам нужно именовать модели и поля осторожно,
  например если мы будем использовать "Order" для имени модели заказа то получим ошибку.</b>
</p>
  <p>
Строка заказа:
<pre style="white-space: pre-wrap;">
package org.myapp.ordering;

import java.math.BigDecimal;

import org.beigesoft.mdl.IOwnedOr;
import org.beigesoft.mdlp.AOrId;

public class OrderLine extends AOrId implements IOwnedOr&lt;COrder&gt; {
  
  private COrder ownr;
  
  private Merchandise product;
  
  private BigDecimal itsQuantity;
  
  private BigDecimal itsPrice;

  private BigDecimal itsAmount;

  /**
   * &lt;p&gt;Getter for ownr.&lt;/p&gt;
   * @return COrder
   **/
  @Override
  public final COrder getOwnr() {
    return this.ownr;
  }

  /**
   * &lt;p&gt;Setter for ownr.&lt;/p&gt;
   * @param pOwnr reference
   **/
  @Override
  public final void setOwnr(final COrder pOwnr) {
    this.ownr = pOwnr;
  }

  //Simple getters and setters:
  /**
   * &lt;p&gt;Getter for product.&lt;/p&gt;
   * @return Merchandise
   **/
  public final Merchandise getProduct() {
    return this.product;
  }

  /**
   * &lt;p&gt;Setter for product.&lt;/p&gt;
   * @param pProduct reference
   **/
  public final void setProduct(final Merchandise pProduct) {
    this.product = pProduct;
  }

  /**
   * &lt;p&gt;Getter for itsQuantity.&lt;/p&gt;
   * @return BigDecimal
   **/
  public final BigDecimal getItsQuantity() {
    return this.itsQuantity;
  }

  /**
   * &lt;p&gt;Setter for itsQuantity.&lt;/p&gt;
   * @param pItsQuantity reference
   **/
  public final void setItsQuantity(final BigDecimal pItsQuantity) {
    this.itsQuantity = pItsQuantity;
  }

  /**
   * &lt;p&gt;Getter for itsPrice.&lt;/p&gt;
   * @return BigDecimal
   **/
  public final BigDecimal getItsPrice() {
    return this.itsPrice;
  }

  /**
   * &lt;p&gt;Setter for itsPrice.&lt;/p&gt;
   * @param pItsPrice reference
   **/
  public final void setItsPrice(final BigDecimal pItsPrice) {
    this.itsPrice = pItsPrice;
  }

  /**
   * &lt;p&gt;Getter for itsAmount.&lt;/p&gt;
   * @return BigDecimal
   **/
  public final BigDecimal getItsAmount() {
    return this.itsAmount;
  }

  /**
   * &lt;p&gt;Setter for itsAmount.&lt;/p&gt;
   * @param pItsAmount reference
   **/
  public final void setItsAmount(final BigDecimal pItsAmount) {
    this.itsAmount = pItsAmount;
  }
}
</pre>
    </p>

    <h4>Добавление XML конфигурации для импорта полной копии БД.</h4>
    <p>Скопируйте <b>conf.xml</b> из <b>beige-blc/src/main/resources/dbcp</b> в "myapp - src - main - resources - dbcp" и добавьте 4 новых модели:
<pre style="white-space: pre-wrap;">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;
&lt;properties&gt;
&lt;comment&gt;My ordering DBCP configuration&lt;/comment&gt;
&lt;entry key="clss"&gt;org.beigesoft.mdlp.DbInf,
  org.beigesoft.mdlp.UsTmc,
  org.beigesoft.mdlp.UsRlTmc,
  org.beigesoft.mdlp.Lng,
  org.beigesoft.mdlp.Cntr,
  org.beigesoft.mdlp.DcSp,
  org.beigesoft.mdlp.DcGrSp,
  org.beigesoft.mdlp.UsPrf,
  org.beigesoft.mdlp.MaFrn,
  org.beigesoft.mdlp.MaFrnLn,
  org.beigesoft.mdlp.CsvMth,
  org.beigesoft.mdlp.CsvCl,
  org.beigesoft.mdlp.EmAdr,
  org.beigesoft.mdlp.EmCon,
  org.beigesoft.mdlp.EmInt,
  org.beigesoft.mdlp.EmStr,
  org.beigesoft.mdlp.EmMsg,
  org.beigesoft.mdlp.EmRcp,
  org.beigesoft.mdlp.EmAtch,
  org.myapp.ordering.Customer,
  org.myapp.ordering.Merchandise,
  org.myapp.ordering.COrder,
  org.myapp.ordering.OrderLine&lt;/entry&gt;
&lt;entry key="stgClsNms"&gt;exlFlds,idFlds&lt;/entry&gt;
&lt;entry key="stgFldNms"&gt;&lt;/entry&gt;
&lt;entry key="exlFlds"&gt;isNew&lt;/entry&gt;
&lt;/properties&gt;
</pre>
Порядок важен! OrderLine последняя так как содержит Merchandise и COrder.
    </p>

    <h4>Добавление XML конфигурации для ОРМ.</h4>
    <p>Скопируйте <b>conf.xml</b> из <b>beige-blc/sqlite</b> в "myapp - src - main - resources - sqlite" и добавьте модели:
<pre style="white-space: pre-wrap;">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;
&lt;properties&gt;
&lt;comment&gt;My ordering SQLite configuration&lt;/comment&gt;
&lt;entry key="clss"&gt;org.beigesoft.mdlp.DbInf,
  org.beigesoft.mdlp.UsTmc,
  org.beigesoft.mdlp.UsRlTmc,
  org.beigesoft.mdlp.Lng,
  org.beigesoft.mdlp.Cntr,
  org.beigesoft.mdlp.DcSp,
  org.beigesoft.mdlp.DcGrSp,
  org.beigesoft.mdlp.UsPrf,
  org.beigesoft.mdlp.MaFrn,
  org.beigesoft.mdlp.MaFrnLn,
  org.beigesoft.mdlp.CsvMth,
  org.beigesoft.mdlp.CsvCl,
  org.beigesoft.mdlp.EmAdr,
  org.beigesoft.mdlp.EmCon,
  org.beigesoft.mdlp.EmInt,
  org.beigesoft.mdlp.EmStr,
  org.beigesoft.mdlp.EmMsg,
  org.beigesoft.mdlp.EmRcp,
  org.beigesoft.mdlp.EmAtch,
  org.myapp.ordering.Customer,
  org.myapp.ordering.Merchandise,
  org.myapp.ordering.COrder,
  org.myapp.ordering.OrderLine&lt;/entry&gt;
&lt;entry key="stgClsNms"&gt;exlFlds,idFlds,vrAlg,cnstr&lt;/entry&gt;
&lt;entry key="stgFldNms"&gt;def,nul&lt;/entry&gt;
&lt;entry key="exlFlds"&gt;isNew&lt;/entry&gt;
&lt;/properties&gt;
</pre>
ОРМ значит что вам не нужно делать SQL команды вручную. Например для создания нового Merchandise в БД:
<pre style="white-space: pre-wrap;">
Merchandise product1 = new Merchandise();
product1.setNme("Продукт 1"); //Код будет сгенерирован автоматически
this.orm.insIdLn(product1); //ОРМ сама делает SQL insert команду, и устанавливает сгенерированный код для товара
</pre>
    </p>

    <p>Затем скопируйте <b>cmnst.xml</b> из <b>beige-blc/sqlite</b> в "myapp - src - main - resources - sqlite" и измените имя базы данных:
<pre style="white-space: pre-wrap;">
...
&lt;entry key="dbUrl"&gt;jdbc:sqlite:#currentDir#myordering.sqlite&lt;/entry&gt;
...
</pre>
    </p>

    <h4>Добавление XML конфигурации для ВЕБ-интерфейса.</h4>
    <p>Скопируйте <b>conf.xml</b> из <b>beige-blc/uvd</b> в "myapp - src - main - resources - uvd" и добавьте модели:
<pre style="white-space: pre-wrap;">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;
&lt;properties&gt;
&lt;comment&gt;UVD configuration&lt;/comment&gt;
&lt;entry key="clss"&gt;org.beigesoft.mdlp.UsTmc,
  org.beigesoft.mdlp.UsRlTmc,
  org.beigesoft.mdlp.Lng,
  org.beigesoft.mdlp.Cntr,
  org.beigesoft.mdlp.DcSp,
  org.beigesoft.mdlp.DcGrSp,
  org.beigesoft.mdlp.UsPrf,
  org.beigesoft.mdlp.MaFrn,
  org.beigesoft.mdlp.MaFrnLn,
  org.beigesoft.mdlp.CsvMth,
  org.beigesoft.mdlp.CsvCl,
  org.beigesoft.mdlp.EmAdr,
  org.beigesoft.mdlp.EmCon,
  org.beigesoft.mdlp.EmInt,
  org.beigesoft.mdlp.EmStr,
  org.beigesoft.mdlp.EmMsg,
  org.beigesoft.mdlp.EmRcp,
  org.beigesoft.mdlp.EmAtch,
  org.myapp.ordering.Customer,
  org.myapp.ordering.Merchandise,
  org.myapp.ordering.COrder,
  org.myapp.ordering.OrderLine&lt;/entry&gt;
&lt;entry key="stgClsNms"&gt;exlFlds,idFlds,owdEnts,frmFds,lstFds,pickFds,selFds,selDpl&lt;/entry&gt;
&lt;entry key="stgFldNms"&gt;cnToSt,cnFrSt,inp,str,wde&lt;/entry&gt;
&lt;entry key="exlFlds"&gt;&lt;/entry&gt;
&lt;/properties&gt;
</pre>
    </p>
    <p>Затем создайте файл COrder.xml в "myapp - src - main - resources - uvd - clsCs":
<pre style="white-space: pre-wrap;">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;
&lt;properties&gt;
&lt;entry key="frmFds"&gt;iid,idOr,dbOr,itsDate,customer,itsTotal&lt;/entry&gt;
&lt;entry key="owdEnts"&gt;org.myapp.ordering.OrderLine&lt;/entry&gt;
&lt;/properties&gt;
</pre>
Он описывает какие поля должны быть заполнены и их порядок.
Также здесь указываются владеемые списки (строки) которые должны отображаться в форме редактирования владельца.
    </p>
    <p>Затем добавьте OrderLine.xml в "myapp - src - main - resources - uvd - clsCs":
<pre style="white-space: pre-wrap;">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;
&lt;properties&gt;
&lt;entry key="frmFds"&gt;iid,idOr,dbOr,product,itsQuantity,itsPrice,itsAmount&lt;/entry&gt;
&lt;/properties&gt;
</pre>
    </p>
    <p>Затем скопируйте cnToSt.xml из <b>beige-blc</b> в "myapp - src - main - resources - uvd - fldTyFs" добавьте BigDecimal:
<pre style="white-space: pre-wrap;">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;
&lt;properties&gt;
&lt;entry key="java.util.Date"&gt;CnvDtTmStr&lt;/entry&gt;
&lt;entry key="java.math.BigDecimal"&gt;CnvPriStr&lt;/entry&gt;
&lt;/properties&gt;
</pre>
Данный файл указывает какой конвертер в строковое представление будет использоваться для полей с данными типами.
    </p>
    <p>Затем скопируйте str.xml из <b>beige-blc</b> в "myapp - src - main - resources - uvd - fldTyFs" и отредактируйте:
<pre style="white-space: pre-wrap;">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;
&lt;properties&gt;
&lt;entry key="java.lang.Long"&gt;str&lt;/entry&gt;
&lt;entry key="java.math.BigDecimal"&gt;str&lt;/entry&gt;
&lt;entry key="java.util.Date"&gt;dtTm&lt;/entry&gt;
&lt;/properties&gt;
</pre>
Данный файл указывает какой виджет (JSP) будет использоваться для отображения полей согласно их типу.
    </p>
    <p>Затем скопируйте inp.xml from <b>beige-blc</b> в "myapp - src - main - resources - uvd - fldTyFs" и отредактируйте:
<pre style="white-space: pre-wrap;">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;
&lt;properties&gt;
&lt;entry key="org.beigesoft.mdl.IHasNm"&gt;nme&lt;/entry&gt;
&lt;entry key="org.beigesoft.mdl.IHasId"&gt;hsid&lt;/entry&gt;
&lt;entry key="java.util.Date"&gt;dtTm&lt;/entry&gt;
&lt;entry key="java.lang.String"&gt;str&lt;/entry&gt;
&lt;entry key="java.lang.Long"&gt;int&lt;/entry&gt;
&lt;entry key="java.lang.Boolean"&gt;bln&lt;/entry&gt;
&lt;entry key="java.math.BigDecimal"&gt;pri&lt;/entry&gt;
&lt;/properties&gt;
</pre>
Данный файл указывает какой виджет (JSP) будет использоваться для редактирования полей согласно их типу.
    </p>
    <p>На данное время это все по базовой логике.</p>

    </section>

  </body>

</document>
